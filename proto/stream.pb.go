// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package knative

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CloudEvent struct {
	Version              string               `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Type                 string               `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Source               string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Subject              string               `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Id                   string               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Schema               string               `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	ContentType          string               `protobuf:"bytes,8,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	DataMediaType        string               `protobuf:"bytes,9,opt,name=data_media_type,json=dataMediaType,proto3" json:"data_media_type,omitempty"`
	Extensions           map[string]string    `protobuf:"bytes,10,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                 []byte               `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CloudEvent) Reset()         { *m = CloudEvent{} }
func (m *CloudEvent) String() string { return proto.CompactTextString(m) }
func (*CloudEvent) ProtoMessage()    {}
func (*CloudEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *CloudEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudEvent.Unmarshal(m, b)
}
func (m *CloudEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudEvent.Marshal(b, m, deterministic)
}
func (m *CloudEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudEvent.Merge(m, src)
}
func (m *CloudEvent) XXX_Size() int {
	return xxx_messageInfo_CloudEvent.Size(m)
}
func (m *CloudEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CloudEvent proto.InternalMessageInfo

func (m *CloudEvent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CloudEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CloudEvent) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CloudEvent) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CloudEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudEvent) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CloudEvent) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *CloudEvent) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *CloudEvent) GetDataMediaType() string {
	if m != nil {
		return m.DataMediaType
	}
	return ""
}

func (m *CloudEvent) GetExtensions() map[string]string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *CloudEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CloudEvent)(nil), "knative.CloudEvent")
	proto.RegisterMapType((map[string]string)(nil), "knative.CloudEvent.ExtensionsEntry")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x6f, 0xa2, 0x40,
	0x14, 0xc6, 0x17, 0x50, 0x5c, 0x1f, 0xee, 0xba, 0x99, 0xdd, 0x6c, 0x26, 0x5c, 0x4a, 0x6d, 0xd2,
	0x70, 0x1a, 0x1b, 0x7b, 0x31, 0x4d, 0x7a, 0xa9, 0xf1, 0xd8, 0x0b, 0xf5, 0x6e, 0x46, 0x78, 0xb5,
	0x54, 0x61, 0x0c, 0x0c, 0xa4, 0xfe, 0x45, 0xfd, 0x37, 0x9b, 0x79, 0x80, 0x6d, 0x1a, 0x6f, 0xef,
	0xfb, 0xf1, 0xcd, 0x9b, 0x8f, 0x6f, 0x60, 0x54, 0xea, 0x02, 0x65, 0x26, 0x0e, 0x85, 0xd2, 0x8a,
	0x0d, 0x76, 0xb9, 0xd4, 0x69, 0x8d, 0xfe, 0xc5, 0x56, 0xa9, 0xed, 0x1e, 0xa7, 0x84, 0x37, 0xd5,
	0xf3, 0x54, 0xa7, 0x19, 0x96, 0x5a, 0x66, 0x87, 0xc6, 0x39, 0x79, 0x77, 0x00, 0x16, 0x7b, 0x55,
	0x25, 0xcb, 0x1a, 0x73, 0xcd, 0x38, 0x0c, 0x6a, 0x2c, 0xca, 0x54, 0xe5, 0xdc, 0x0a, 0xac, 0x70,
	0x18, 0x75, 0x92, 0x31, 0xe8, 0xe9, 0xe3, 0x01, 0xb9, 0x4d, 0x98, 0x66, 0xf6, 0x1f, 0xdc, 0x52,
	0x55, 0x45, 0x8c, 0xdc, 0x21, 0xda, 0x2a, 0xb3, 0xa5, 0xac, 0x36, 0xaf, 0x18, 0x6b, 0xde, 0x6b,
	0xb6, 0xb4, 0x92, 0xfd, 0x06, 0x3b, 0x4d, 0x78, 0x9f, 0xa0, 0x9d, 0x26, 0x4c, 0x40, 0xcf, 0x24,
	0xe2, 0x6e, 0x60, 0x85, 0xde, 0xcc, 0x17, 0x4d, 0x5c, 0xd1, 0xc5, 0x15, 0xab, 0x2e, 0x6e, 0x44,
	0x3e, 0xba, 0x31, 0x7e, 0xc1, 0x4c, 0xf2, 0x41, 0x7b, 0x23, 0x29, 0x76, 0x09, 0xa3, 0x58, 0xe5,
	0x1a, 0x73, 0xbd, 0xa6, 0x94, 0x3f, 0xe9, 0xab, 0xd7, 0xb2, 0x95, 0x09, 0x7b, 0x0d, 0xe3, 0x44,
	0x6a, 0xb9, 0xce, 0x30, 0x49, 0x65, 0xe3, 0x1a, 0x92, 0xeb, 0x97, 0xc1, 0x8f, 0x86, 0x92, 0x6f,
	0x01, 0x80, 0x6f, 0x1a, 0x73, 0xf3, 0xd7, 0x25, 0x87, 0xc0, 0x09, 0xbd, 0xd9, 0x95, 0x68, 0x0b,
	0x15, 0x9f, 0x5d, 0x89, 0xe5, 0xc9, 0xb5, 0xcc, 0x75, 0x71, 0x8c, 0xbe, 0x1c, 0x33, 0x6d, 0x99,
	0xad, 0xdc, 0x0b, 0xac, 0x70, 0x14, 0xd1, 0xec, 0xdf, 0xc3, 0xf8, 0xdb, 0x11, 0xf6, 0x07, 0x9c,
	0x1d, 0x1e, 0xdb, 0xaa, 0xcd, 0xc8, 0xfe, 0x41, 0xbf, 0x96, 0xfb, 0xaa, 0xeb, 0xb9, 0x11, 0x77,
	0xf6, 0xdc, 0x9a, 0x3d, 0x80, 0xfb, 0x44, 0x6f, 0xcc, 0xe6, 0xa7, 0xe9, 0xef, 0x99, 0x5c, 0xfe,
	0x39, 0x38, 0xf9, 0x11, 0x5a, 0x37, 0xd6, 0xc6, 0xa5, 0x62, 0x6f, 0x3f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xba, 0x01, 0x45, 0xdf, 0x2e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Stream_StreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Stream_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/knative.Stream/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStreamClient{stream}
	return x, nil
}

type Stream_StreamClient interface {
	Send(*CloudEvent) error
	Recv() (*CloudEvent, error)
	grpc.ClientStream
}

type streamStreamClient struct {
	grpc.ClientStream
}

func (x *streamStreamClient) Send(m *CloudEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStreamClient) Recv() (*CloudEvent, error) {
	m := new(CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Stream(Stream_StreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) Stream(srv Stream_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Stream(&streamStreamServer{stream})
}

type Stream_StreamServer interface {
	Send(*CloudEvent) error
	Recv() (*CloudEvent, error)
	grpc.ServerStream
}

type streamStreamServer struct {
	grpc.ServerStream
}

func (x *streamStreamServer) Send(m *CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStreamServer) Recv() (*CloudEvent, error) {
	m := new(CloudEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "knative.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Stream_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
